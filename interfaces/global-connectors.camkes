/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(NICTA_BSD)
 */

/**
 * @file
 *
 * This file defines a list of connectors. A connection is an instance of a
 * connector, allowing two components to communicate with each other.
 * Different connectors are used for different purposes.
 *
 * In essence, a connector defines how exactly a component connects to another
 * component. There are two parts, from and to. Most of the connectors are
 * defined such that the "from" component sends data to the "to" component. So
 * the "from" component is more like a sender and the "to" component is like a
 * receiver. Having said that, a totally different semantic can be implemented.
 * It's really up to the programmer to decide it.
 *
 * To use the connector, you define it like this:
 *
 *    connection RPC util_fatfs_FS(from util.fs, to fatfs.fs);
 *
 * where the util_fatfs_FS connection is an instance of the RPC connector. It
 * connects util.fs interface to fatfs.fs interface.
 */

/**
 * RPCCallDataport connector
 *
 * This connector is like the regular RPCCall connector, except that
 * it transparanty allocates and uses a shared dataport between sender
 * and receiver, rather than the IPC buffer.
 *
 * It requires an attribute to define a badge for it to use and to couple
 * the RPC connector and the associated dataport. The badge can be any
 * unique number.
 * 	<from_component>.<from_interface>_attributes = "<badge>";
 */
connector seL4RPCCallDataport {
    from Procedure user_inf template "seL4RPCCallDataport-from.template.c";
    to Procedure provider_inf template "seL4RPCCallDataport-to.template.c";
}

/**
 * seL4GlobalAsynch
 *
 * This is a 1-to-n global endpoint Event connector that makes the underlying
 * seL4 Notification endpoint capability available directly to the consuming
 * component.
 *
 * This Event connector does not provide the consumer with the
 * usual wait or callback interfaces, but only provides the following function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * Global endpoint connectors allows an Event interface to be coupled with
 * other interfaces in a component.  The interfaces coupled with
 * an Event will be able to access that Event's underlying Notification
 * endpoint capability.
 *
 * Coupling of interfaces occurs through matching attribute values. Each global
 * endpoint connection defines a "_global_endpoint" attribute for its associated
 * interfaces.  Those interfaces (within a component) whose "_global_endpoint"
 * attributes match are coupled.
 */
connector seL4GlobalAsynch {
    from Event template "seL4GlobalAsynch-from.template.c";
    to Events template "seL4GlobalAsynch-to.template.c";
}

/**
 * seL4GlobalAsynchCallback
 *
 * This is a 1-to-n global endpoint Event connector that makes the underlying
 * seL4 Notification endpoint capability available directly to the consuming
 * component.
 *
 * This Event connector provides the consumer with the usual callback
 * interface as well as the following function:
 *      seL4_CPtr <interface name>_notification(void);
 *
 * Global endpoint connectors allow an Event interface to be coupled with
 * other interfaces in a component.  The interfaces coupled with
 * an Event will be able to access that Event's underlying Notification
 * endpoint capability.
 *
 * Coupling of interfaces occurs through matching attribute values. Each global
 * endpoint connection defines a "_global_endpoint" attribute for its associated
 * interfaces.  Those interfaces (within a component) whose "_global_endpoint"
 * attributes match are coupled.
 */
connector seL4GlobalAsynchCallback {
    from Event template "seL4GlobalAsynchCallback-from.template.c";
    to Events template "seL4GlobalAsynchCallback-to.template.c";
}

